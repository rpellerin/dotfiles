#############
# FUNCTIONS #
#############

# Opens in VS code files edited in last commit by default, or provided hash commit (first argument)
function open_last_modified_files() {
    COMMIT_HASH=${1:-HEAD}
    git diff-tree --no-commit-id --name-only -r "$COMMIT_HASH" | xargs code -r
}

# Tips for bash
# Taken from http://samrowe.com/wordpress/advancing-in-the-bash-shell/
function bashftw() {
    echo '!! - last command'
    echo '!xyz - last command beginning with xyz'
    echo '!xyz:p - same but do not run the command'
    echo '!-3 - antepenultimate command'
    echo '!$ - last argument of the previous command'
    echo '!* - all arguments of the previous command'
    echo '^FOO^BAR - replace FOOs with BARs in the previous command'
    echo '^w - erase word'
    echo '^u - erase from here to the beginning of the line'
    echo '^a - go to beginning of the line'
    echo '^e - go to end of the line'
    echo 'ls /usr/{,local/}{,s}bin/jojo - ls /usr/bin/jojo /usr/sbin/jojo /usr/local/bin/jojo /usr/local/sbin/jojo'
    echo '!!:h - last command + remove a trailing file name component, leaving only the head'
    echo '!!:t - last command + remove all leading file name components, leaving the tail'
    echo '!-2$:r - last argument of penultimate command + remove a trailing suffix of the form .xxx, leaving the basename'
    echo '!$:e - last argument of previous command + remove all but the trailing suffix'
    echo '!!:s/mroe/more - replace ONCE mroe with more in the previous command'
    echo '!!:gs/mroe/more - replace every instance of mroe with more in the previous command'
    echo '!!:s/myfile/&.old/ - replace ONCE myfile with myfile.old in the previous command'
}

# Upload a file to transfer.sh
function transfer() {
    if [ $# -eq 0 ]; then
        echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
        return 1
    fi
    tmpfile=$( mktemp -t transferXXX )
    if tty -s; then
        basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
        curl --globoff --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile
    else
        curl --globoff --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile
    fi
    cat $tmpfile; rm -f $tmpfile
}

# Backup a file with date
function backup() {
    cp "$1" "$1_`date +%Y-%m-%d_%H-%M-%S`_BACKUP"
}

# Update all git repos
function update_git_repos() {
  if [ $# -ne 1 ]; then
    echo "This function requires one parameter which must be a directory"
    return
  fi
  CURRENT_DIR=`pwd`
  echo "Updating all Git repos"
  for DIR in "$1"/*; do
    echo "\n========================================\n$DIR\n========================================"
    if [[ -d "$CURRENT_DIR/$DIR" ]]; then
      \cd "$CURRENT_DIR/$DIR"
      git status
      git pull origin $(git rev-parse --abbrev-ref HEAD)
    else
      echo "$CURRENT_DIR/$DIR not a directory"
    fi
  done
  \cd "$CURRENT_DIR"
}

# Extract any archive
function extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)  tar xjf $1      ;;
            *.tar.gz)   tar xzf $1      ;;
            *.tar.xz)   tar xf $1       ;;
            *.xz)       xz --decompress $1       ;;
            *.bz2)      bunzip2 $1      ;;
            *.rar)      rar x $1        ;;
            *.gz)       gunzip $1       ;;
            *.tar)      tar xf $1       ;;
            *.tbz2)     tar xjf $1      ;;
            *.tgz)      tar xzf $1      ;;
            *.zip)      unzip $1        ;;
            *.Z)        uncompress $1   ;;
            *)          echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Ban an IP
function ban() {
    if [ "`id -u`" == "0" ] ; then
        iptables -A INPUT -s $1 -j DROP
    else
        sudo iptables -A INPUT -s $1 -j DROP
    fi
}

function update-gh() {
    curl -s https://api.github.com/repos/cli/cli/releases/latest | grep -o -P '(?<=browser_download_url": ")https:.*amd64\.deb' | wget -qi - -O /tmp/gh.deb ; cd /tmp ; sudo apt install ./gh.deb; cd -
}

# Update + upgrade the system
function maj() {
    pidof firefox >/dev/null
    [ "$?" -eq 0 ] && zenity --error --text="Please close Firefox\!" --title="Warning\!"
    sudo snap refresh
    sudo apt autoremove && sudo apt clean && sudo apt update && sudo apt upgrade
    pkill xfce4-notifyd # Close Firefox snap notification
    /usr/bin/python3 -m venv --upgrade ~/python-venv/
    python3 -m pip install --upgrade yt-dlp pip
    sudo apt clean
    notify-send -t 10000 "Update and upgrade done"
}

# Display the content of a directory after a 'cd'
function custom_cd () {
        \cd $@ && ls
}

# Open a file with the appropriate application
function open {
    while [ "$1" ] ; do
        xdg-open $1 &> /dev/null
        shift # shift dÃ©cale les param
    done
}

# Remove all backup files in specified directory and sub-directories
function rm_backup {
    find $1 -name '*~' -exec rm '{}' \; -print
}

# Shows the last modified files
function last_modified {
    find $1 -type f -exec stat --format '%Y :%y %n' {} \; | sort -n | cut -d: -f2- | tail
}

# Set the brightness to the desired value (0-100)
function set_brightness {
  sudo sh -c "echo $1 > /sys/class/backlight/acpi_video0/brightness"
}

# A reminder
function findhelp {
    echo "--------------------------------------------------------"
    echo "# Delete a file recursively:"
    echo "find / -name '*.DS_Store' -type f -delete"
    echo "--------------------------------------------------------"
    echo "# Rename a file recursively:"
    echo "find / -type f -exec rename 's/oldname/newname/' '{}' \;"
    echo "--------------------------------------------------------"
    echo "# Find recently modified files"
    echo "find / -type f -printf '%TY-%Tm-%Td %TT %p\n' | sort -r"
    echo "--------------------------------------------------------"
}

# A reminder
function githelp {
    echo "-------------------------------------------------------------------------------"
    echo "git clone http://... [repo-name]"
    echo "git init [repo-name]"
    echo "-------------------------------------------------------------------------------"
    echo "git add -A <==> git add . ; git add -u # Add to the staging area (index)"
    echo "-------------------------------------------------------------------------------"
    echo "git commit -m 'message' -a"
    echo "git commit -m 'message' -a --amend"
    echo "-------------------------------------------------------------------------------"
    echo "git status"
    echo "git log --stat # Last commits, --stat optional"
    echo "git ls-files"
    echo "git diff HEAD~1..HEAD"
    echo "-------------------------------------------------------------------------------"
    echo "git push origin master"
    echo "git push origin master:master"
    echo "-------------------------------------------------------------------------------"
    echo "git remote add origin http://..."
    echo "git remote set-url origin git://..."
    echo "-------------------------------------------------------------------------------"
    echo "git stash"
    echo "git pull origin master"
    echo "git stash list ; git stash pop"
    echo "-------------------------------------------------------------------------------"
    echo "git submodule add /absolute/path repo-name"
    echo "git submodule add http://... repo-name"
    echo "-------------------------------------------------------------------------------"
    echo "git checkout -b new-branch <==> git branch new-branch ; git checkout new-branch"
    echo "git merge old-branch"
    echo "git branch local_name origin/remote_name # Associate branches"
    echo "-------------------------------------------------------------------------------"
    echo "git update-index --assume-unchanged <file> # Ignore changes"
    echo "git rm --cached <file> # Untrack a file"
    echo "-------------------------------------------------------------------------------"
    echo "git reset --hard HEAD # Repair what has been done since last commit"
    echo "git revert HEAD # Repair last commit"
    echo "git checkout [file] # Reset a file to its previous state at last commit"
    echo "-------------------------------------------------------------------------------"
    echo "git tag # List"
    echo "git tag v0.5 # Lightwieght tag"
    echo "git tag -a v1.4 -m 'my version 1.4' # Annotated tag"
    echo "git push origin v1.4 # Pushing"
    echo "-------------------------------------------------------------------------------"
    echo "HOW TO RENAME A BRANCH LOCALLY AND REMOTELY"
    echo "git branch -m old_name new_name"
    echo "git push origin new_name"
    echo "git push origin :old_name"
    echo "------"
    echo "Each other client of the repository has to do:"
    echo "git fetch origin ; git remote prune origin"
    echo "-------------------------------------------------------------------------------"
}

function shellvarshelp {
    echo '- $_: last argument of the preceding command'
    echo '- !$: last word of the previous entry in history'
    echo '- $!: last command''s PID'
    echo '- %: last job (see `jobs`). A good use of it is `kill -9 %`.'
    echo '- %1: job with ID in the list of running jobs (see `jobs`)'
}

# A reminder
function tmuxhelp {
    echo "--------------------------------------------------------"
    echo "tmux <=> tmux new -s name"
    echo "--------------------------------------------------------"
    echo "tmux a <=> tmux a -t name # Attach to a session"
    echo "tmux ls ; tmux kill-session -t name # List/kill sessions"
    echo "--------------------------------------------------------"
    echo "# Sessions"
    echo "ctrl+b s # List and change session"
    echo "ctrl+b $ # Rename session"
    echo "ctrl+b d # Detach"
    echo "--------------------------------------------------------"
    echo "# Windows (tabs)"
    echo "ctrl+b c # New window"
    echo "ctrl+b , # Rename window"
    echo "ctrl+b w # List windows"
    echo "ctrl+b f # Find window"
    echo "ctrl+b & # Kill window"
    echo "ctrl+b . # Move window"
    echo "ctrl+b n # Next window"
    echo "ctrl+b p # Previous window"
    echo "--------------------------------------------------------"
    echo "Panes (splits)"
    echo "ctrl+b % # Horizontal split"
    echo "ctrl+b \" # Vertical split"
    echo "ctrl+b M-o # Swap panes"
    echo "ctrl+b o # Go to pane"
    echo "ctrl+b ; # Go to pane"
    echo "ctrl+b <arrow> # Go to pane"
    echo "ctrl+b q # Show pane numbers"
    echo "ctrl+b x # Kill pane"
    echo "ctrl+b (space) # Toggle between layouts"
    echo "ctrl+b M-<arrow> # Resize panes"
    echo "--------------------------------------------------------"
    echo "# Others"
    echo "ctrl+b t # Big clock"
    echo "ctrl+b ? # List shortcuts"
    echo "ctrl+b : # Prompt"
    echo "--------------------------------------------------------"
    echo "Taken from: https://gist.github.com/henrik/1967800"
}

function gitwhoistheboss {
    echo 'You can specify a pattern, for example **/*.cpp'
    echo 'git ls-tree -r -z --name-only HEAD -- **/*.cpp | xargs -0 -n1 git blame --line-porcelain HEAD |grep  "^author "|sort|uniq -c|sort -nr'
}

function ino {
    EVENTS="create,modify,close_write,moved_to"; while inotifywait -e $EVENTS -r ./ --exclude '(.*\.sw(p|x))'; do $@; done
}

function delete-gone-branches {
    git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -D
    for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done
}

function zoomin {
    perl -pi -e 's/(FontName.*?)(\d+)/$1.($2+2)/e' ~/.config/xfce4/terminal/terminalrc
}

function zoomout {
    perl -pi -e 's/(FontName.*?)(\d+)/$1.($2-2)/e' ~/.config/xfce4/terminal/terminalrc
}

function new-pr {
    branch="$(git rev-parse --abbrev-ref HEAD)"
    if [ -z "$PR_TITLE" ]; then
        title=`whiptail --title "PR title" --menu "Choose the PR title" 0 0 0 \
            "$(git show -s --format=%s HEAD)" "" \
            "<Custom>" "" \
            "$(git show -s --format=%s HEAD~1)" "" \
            "$(git show -s --format=%s HEAD~2)" "" 3>&1 1>&2 2>&3`
        [ $? -ne 0 ] && return 0
        if [ $title = '<Custom>' ]; then
            title=$(whiptail --inputbox "PR title?" 0 70 "$branch" --title "PR title" 3>&1 1>&2 2>&3)
            [ $? -ne 0 ] && return 0
        fi
    else
        title="$PR_TITLE"
    fi
    git push origin "$branch"
    gh pr create --title "$title" "$@"
    gh pr view --web
}

function wifi_up {
    wifi_device="$(nmcli --get-values GENERAL.DEVICE,GENERAL.TYPE device show | tr '\n' ',' | grep -Po '([^,]+)(?=,wifi,,)')"
    nmcli device up $wifi_device
}

function wifi_down {
    wifi_device="$(nmcli --get-values GENERAL.DEVICE,GENERAL.TYPE device show | tr '\n' ',' | grep -Po '([^,]+)(?=,wifi,,)')"
    nmcli device down $wifi_device
}

function vpn_up {
    wifi_device="$(nmcli --get-values GENERAL.DEVICE,GENERAL.TYPE device show | tr '\n' ',' | grep -Po '([^,]+)(?=,wifi,,)')"
    default_device="$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1)"
    if [ "$wifi_device" != "$default_device" ]; then
        wifi_down
    fi
    nmcli co up $(nmcli co show | grep vpn | cut -d' ' -f1)
}

function vpn_down {
    nmcli co down $(nmcli co show | grep vpn | cut -d' ' -f1)
}

###########
# ALIASES #
###########

# Overriding default commands
alias ls='ls --color=auto'
alias grep='grep -i --color=auto'
alias rm='rm --interactive --verbose'
alias mv='mv --interactive --verbose'
alias cp='cp --verbose'
alias cd="custom_cd" # custom_cd is a custom function (see above)
alias git="noglob git" # For zsh, see https://yous.be/2014/08/05/zsh-no-matches-found/

# Some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='exa -lh'
alias rials='rails'

# Handy shortcuts
alias du="ncdu -rr -x --exclude .git --exclude node_modules"
#alias man='tldr'
alias top='htop'
alias gt='git'
alias gut='git'
alias lstree="find . | sed 's/[^/]*\//|   /g;s/| *\([^| ]\)/+--- \1/'"
alias path='echo $PATH | tr ":" "\n"'
alias watch='watch ' # Source of this hack: http://yabfog.com/blog/2012/09/06/using-watch-with-a-bash-alias
alias ssh='ssh -X'
alias pause="i3lock -i $HOME/Images/pause.png -n -t"
alias speedtest="wget -nc -O /tmp/speedtest-cli https://raw.github.com/sivel/speedtest-cli/master/speedtest.py ; chmod +x /tmp/speedtest-cli && /tmp/speedtest-cli"
alias myip="dig +short myip.opendns.com @resolver1.opendns.com"
# Some sources :
#  - http://root.abl.es/methods/1504/automatic-unzipuntar-using-correct-tool/
#  - http://forum.ubuntu-fr.org/viewtopic.php?id=20437&p=3
#  - http://www.mercereau.info/partage-de-mon-fichier-bash_aliases/

source "`dirname $0`/.private_aliases"
