if [[ -z "$NO_OUTPUT" ]] ; then
    echo "`printf '\033[01;32m'`Hello `printf '\033[01;34m'`$USER`printf '\033[00m'`"
    echo "My IP address is `printf '\033[01;31m'`$(hostname -I)`printf '\033[m'`"
fi

export EDITOR=vim
export VISUAL=vim

# Enable Ctrl-x-e to edit command line
autoload edit-command-line
zle -N edit-command-line
bindkey "^x^e" edit-command-line

#export NPM_CONFIG_PREFIX=~/.npm-global

export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export ANDROID_HOME=/home/romain/Android/Sdk
export ANDROID_SDK=/home/romain/Android/Sdk
export ANDROID_NDK=/home/romain/Android/Ndk
PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools
export GPG_TTY=$(tty)

#echo -e "CPU temp: \c" && {/opt/vc/bin/vcgencmd measure_temp | cut -d = -f 2}

. /usr/share/autojump/autojump.sh

export PS1="\$(date +%k:%M:%S) $PS1"

# http://stackoverflow.com/questions/19327836/why-am-i-seeing-only-8-colors-in-terminal-xfce-terminal
if [[ "$COLORTERM" == "xfce4-terminal" ]] ; then
    export TERM=xterm-256color
fi

PATH=$PATH:/home/romain/git/dotfiles/scripts:/home/romain/android-studio/bin/:/home/romain/.npm-global/bin:/usr/local/go/bin:/home/romain/.local/bin

autoload -Uz add-zsh-hook

git-check-should-rebase() {
    user_command="$1"
    if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
        stringtosearch="git pull"
        # https://stackoverflow.com/questions/2829613/how-do-you-tell-if-a-string-contains-another-string-in-unix-shell-scripting
        if test "${user_command#*$stringtosearch}" = "$user_command"
        then
            # echo 'Not running git pull'
            /home/romain/git/dotfiles/scripts/git-should-rebase.sh
        else
            echo 'Running git pull'
        fi
    fi
}

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

# place this after nvm initialization!
load-nvmrc-and-node-modules() {
  if [ -f package.json ] && [ -x "$(command -v npm)" ]; then
    if [[ -z "$NO_OUTPUT" ]]; then echo 'Found package.json'; fi
    if [[ -z "$NO_OUTPUT" ]]; then echo 'Found npm command'; fi
    NPM_BIN_PATH=$(npm bin)

    if [ "$PREV_NPM_BIN_PATH" != "$NPM_BIN_PATH" ]; then
      # Variable PREV_NPM_BIN_PATH is set and not null, and different from NPM_BIN_PATH
      if [ -n "${PREV_NPM_BIN_PATH+x}" ]; then
        # Removes old NPM_BIN_PATH
        if [[ -z "$NO_OUTPUT" ]]; then echo "Removing ${PREV_NPM_BIN_PATH} from PATH"; fi
        PATH=$(echo $PATH | sed -e "s#${PREV_NPM_BIN_PATH}##g")
        # echo "New PATH: $PATH"
      fi
      if echo "$PATH" | grep -q "$(npm bin)"; then
        if [[ -z "$NO_OUTPUT" ]]; then echo "Removing npm bin from PATH"; fi
        PATH=$(echo $PATH | sed -e "s#${NPM_BIN_PATH}##g")
      fi
      PREV_NPM_BIN_PATH=$NPM_BIN_PATH
      if [[ -z "$NO_OUTPUT" ]]; then echo "Adding $(npm bin) to PATH"; fi
      PATH="$NPM_BIN_PATH:$PATH"
      # echo "Exported PATH: $PATH"
    else
      if [[ -z "$NO_OUTPUT" ]]; then echo '$(npm bin) has not changed. Not touching $PATH.'; fi
    fi
  fi
  if [[ -f .nvmrc && -r .nvmrc ]]; then
    if [[ -z "$NO_OUTPUT" ]]; then nvm use;
    else nvm use>/dev/null; fi
  elif [[ $(nvm version) != $(nvm version default)  ]]; then
    if [[ -z "$NO_OUTPUT" ]]; then echo "Reverting to nvm default version"; fi
    nvm use default
  fi
  git-check-should-rebase
}

add-zsh-hook chpwd load-nvmrc-and-node-modules
add-zsh-hook preexec git-check-should-rebase
load-nvmrc-and-node-modules

# If no file .nvmrc, look for latest node version available, download it and set it as default
#if [[ ! -f .nvmrc && ! -f /tmp/.nvmrc ]]; then
#    NODE_LATEST_VERSION=$(curl --max-time 3 -s 'https://nodejs.org/dist/latest/' | grep -Po 'node-v([0-9]+\.[0-9]+\.[0-9]+)' | head -n 1 | cut -c 6-)
#    echo "Latest version of NodeJS is $NODE_LATEST_VERSION"
#    # Install latest NodeJS if need be
#    if [ "$(node --version)" != "$NODE_LATEST_VERSION" ] && [ "$NODE_LATEST_VERSION" != "" ]; then
#        echo 'Installing the latest version...'
#        nvm install node
#        #nvm use node # Done automatically
#        nvm alias default node
#    fi
#    touch /tmp/.nvmrc
#fi

if [[ -f /home/romain/.ghcup/env ]]; then
    source /home/romain/.ghcup/env
else
    export PATH="$HOME/.cabal/bin:$HOME/.ghcup/bin:$PATH"
fi

export PRY_RESCUE_RAILS="1"
export HTTPS="1"
export SELENIUM_LOCATION=local
export PYENV_ROOT="$HOME/.pyenv"

# rbenv and pyenv
export PATH="$PYENV_ROOT/bin:$HOME/.rbenv/bin:$PATH"
if which rbenv > /dev/null; then
    echo $PATH | grep -q ".rbenv/shims" || eval "$(rbenv init -)"
fi
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export TIME_STYLE=long-iso

if [ ! -d "$HOME/.password-store" ] || [ -z "$(ls -A $HOME/.password-store)" ]; then
    echo '>>> No password store found.'
fi
